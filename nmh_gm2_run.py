import os
from pathlib import Path
import struct
from nmh_gm2 import NmhGm2
from glob import glob

TOOL_NAME = "Jyl's NMH GM2 exporter"

DIR = "filesystem/DATA/files/STG_HI"
OUT_DIR = "out/STG_HI"


def convert(in_path: str, out_dir: str):
    print(in_path)
    gm2: NmhGm2 = NmhGm2.from_file(in_path)

    # Meshes

    for i, world_object in enumerate(gm2.world_objects):
        print(world_object.name)

        out_path = os.path.join(
            out_dir, Path(in_path).stem + f"_{world_object.name}_{i}.obj"
        )

        with open(out_path, "w") as f:
            f.write("# OBJ file\n")
            f.write(f"# Generated by {TOOL_NAME}\n")

            if world_object.surfaces == None:
                f.write(f"# Skipped empty object:\n#o {world_object.name}_{i}\n")
                continue

            f.write(f"# data_c:  {world_object.data_c.hex()}\n")

            last_index = 0
            for ii, surf in enumerate(world_object.surfaces):
                f.write(f"o {world_object.name}_{i}_{ii}\n")
                for buffer in surf.buf_b:
                    x = (
                        struct.unpack(">e", buffer[0:2])[0]
                        * 0.01
                        # + world_object.origin.x
                    )
                    y = (
                        struct.unpack(">e", buffer[2:4])[0]
                        * 0.01
                        # + world_object.origin.y
                    )
                    z = (
                        struct.unpack(">e", buffer[4:6])[0]
                        * 0.01
                        # + world_object.origin.z
                    )
                    f.write(f"v {x} {y} {z}\n")

                # new_indices = 0
                #
                # for face in surf.v_buf.vs:
                #
                #    if face.unk_0 != 0x99:
                #        continue
                #
                #
                #    f.write(f"f")
                #    for buffer in face.unk_1:
                #        f.write(f" {struct.unpack(">H", buffer[0:2])[0] + last_index}")
                #        new_indices += 1
                #    f.write("\n")
                #
                # last_index += new_indices

    # for ii in range(last_index, last_index + area.num_unknown2s):
    #    f.write(f"f {ii * 3 + 1} {ii * 3 + 2} {ii * 3 + 3}\n")

    # last_index += area.num_unknown2s

    return
    # Textures
    for i, texture in enumerate(gm2.textures):

        out_path = os.path.join(
            out_dir, f"{Path(in_path).stem}_{texture.name}_{i}.GCT0"
        )
        with open(out_path, "wb") as f:
            f.write(texture.data)


def convert_all(dir: str, out_dir: str):
    # out dir exists
    os.makedirs(out_dir, exist_ok=True)

    # rm old files
    files = glob(os.path.join(out_dir, "*"))
    for f in files:
        os.remove(f)

    # convert all
    for file in os.listdir(dir):
        if file.endswith(".GM2"):
            path = os.path.join(dir, file)
            convert(path, out_dir)


if __name__ == "__main__":
    convert_all(DIR, OUT_DIR)
